using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libsass"], :libsass_so),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/piever/SassBuilder/releases/download/v3.5.4-0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/libsass.v3.5.4.aarch64-linux-gnu.tar.gz", "5d61915b3a971ca4d70ff50650138ada8586ad6641c9efb2997eacca7b19af5a"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/libsass.v3.5.4.aarch64-linux-musl.tar.gz", "0264387f91122d58c402b15489c8bc47b940d58926edd9f8bda6d625867db64d"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/libsass.v3.5.4.arm-linux-gnueabihf.tar.gz", "d07eaafb8c15c6cca3e9b2f9fd8ca1214d3dcce72b5fae9e7ab08a157aad71be"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/libsass.v3.5.4.arm-linux-musleabihf.tar.gz", "ddb1701074e0204ceec342fafd86bd941624b7e68bea62ddad71dff85c49fcec"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/libsass.v3.5.4.i686-linux-gnu.tar.gz", "0a2930af908786051b6cd019207478aa042d5df24c7beaeaf0e567d6bc3f329a"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/libsass.v3.5.4.i686-linux-musl.tar.gz", "2000a4bb442d5486ec8fb43bbf52b6dadf359d5543b4f91b9e339495463831c8"),
    Windows(:i686) => ("$bin_prefix/libsass.v3.5.4.i686-w64-mingw32.tar.gz", "183e6a626fe5d290cbefb873d4597c0d2b8c84b18041e43cd065f8fdd1074a3e"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/libsass.v3.5.4.powerpc64le-linux-gnu.tar.gz", "107af4805bc3030727fd36470f076c05e35e180226266fa5104036f4cfcfaab6"),
    MacOS(:x86_64) => ("$bin_prefix/libsass.v3.5.4.x86_64-apple-darwin14.tar.gz", "2aa160b86fb06af0ffd7d9b49cb93c2dc55fa67ed65450827af9cacd829a3796"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/libsass.v3.5.4.x86_64-linux-gnu.tar.gz", "84cccfbba2102935de0930f5329bac72d29e0b8a8c9b0aee09de37bc8d4110c5"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/libsass.v3.5.4.x86_64-linux-musl.tar.gz", "f9f99a43bdee6178072dacfc7f121e119064e121f9d31d0a1b3bb0dc5535fc00"),
    FreeBSD(:x86_64) => ("$bin_prefix/libsass.v3.5.4.x86_64-unknown-freebsd11.1.tar.gz", "c0634699023fbf6fcdfd89a9be28b7ae46c9642371375d4e4e0eb96b7dbeee7f"),
    Windows(:x86_64) => ("$bin_prefix/libsass.v3.5.4.x86_64-w64-mingw32.tar.gz", "c1a500824dc78aa57921e01c8ba98d5471133854ad9de701f99979ab19ff8c12"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
