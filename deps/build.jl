using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libsass"], :libsass_so),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/piever/SassBuilder/releases/download/v3.5.5-0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/libsass.v3.5.5.aarch64-linux-gnu.tar.gz", "64b758c1c7beb8e378f14c25490222b964de9ce3a0fb5847ad4b5b484365238f"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/libsass.v3.5.5.aarch64-linux-musl.tar.gz", "e434630073859688055d3a85bd3e430afd71ef00dd8a4ef82d6c309c1b2e2942"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/libsass.v3.5.5.arm-linux-gnueabihf.tar.gz", "f4211366f9462fc6509d0e5677923923282d7f44a06047f77f7a65f0efeb11fd"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/libsass.v3.5.5.arm-linux-musleabihf.tar.gz", "f4a708d364efcc95b7d50a39c48d5772c7fac36d1efedd13276e0b313284bb7d"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/libsass.v3.5.5.i686-linux-gnu.tar.gz", "c4f858746fda14db8201842dc035df86cf3888a1a4c76c67181db427f782d863"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/libsass.v3.5.5.i686-linux-musl.tar.gz", "e1bfe3a415cdd424095505c2fc1c83eae94300806d6e87d5ebd96ae38d5600d3"),
    Windows(:i686) => ("$bin_prefix/libsass.v3.5.5.i686-w64-mingw32.tar.gz", "c6c352c19c3b64926703368a599423dfe85d0f9119d1ea044803bf2be5fd2a08"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/libsass.v3.5.5.powerpc64le-linux-gnu.tar.gz", "fa4f5956020ae06697773ad4b7369ba4472a07610d5b2019e5f1c1fe2709cc96"),
    MacOS(:x86_64) => ("$bin_prefix/libsass.v3.5.5.x86_64-apple-darwin14.tar.gz", "7e2772618d979107fd95619af8e155f2d6a5b4f7e0eabd98751003a6c06814ef"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/libsass.v3.5.5.x86_64-linux-gnu.tar.gz", "80550a8752473b75821a5579d6a9135929c85021838d7cfedccf9ed8550d500d"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/libsass.v3.5.5.x86_64-linux-musl.tar.gz", "6f861acba1ecfdf597dffbd1ad7b78829392747428b17ea4f41ebd9f855e8523"),
    FreeBSD(:x86_64) => ("$bin_prefix/libsass.v3.5.5.x86_64-unknown-freebsd11.1.tar.gz", "2f7513a8799ecf966e7061ea425422c18b30c17d4f54c84b30b78eea4bc3586b"),
    Windows(:x86_64) => ("$bin_prefix/libsass.v3.5.5.x86_64-w64-mingw32.tar.gz", "f2ae64c59d7eb94376cd5d26ad8dc77759aba46ed2e01157e8ad3ea8321ec0d0"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
